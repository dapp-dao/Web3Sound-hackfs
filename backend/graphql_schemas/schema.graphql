type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  userIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): UserConnection
  audioIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): AudioConnection
  followIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): FollowConnection
  likeIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): LikeConnection
  likeAudioIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): LikeAudioConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  user: User
  audioList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): AudioConnection
  followList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): FollowConnection
  likeList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): LikeConnection
  likeAudioList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): LikeAudioConnection
}

type User implements Node {
  id: ID!
  name: String!
  creator: Boolean!
  followers: Int

  """Account controlling the document"""
  did: CeramicAccount!
}

"""A connection to a list of items."""
type AudioConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AudioEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type AudioEdge {
  """The item at the end of the edge"""
  node: Audio

  """A cursor for use in pagination"""
  cursor: String!
}

type Audio implements Node {
  id: ID!
  likes(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): LikeConnection!
  title: String!
  public: Boolean!
  deleted: Boolean!
  audioImage: String!
  audioTrack: String!

  """Account controlling the document"""
  creator: CeramicAccount!
}

"""A connection to a list of items."""
type LikeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LikeEdge]
}

"""An edge in a connection."""
type LikeEdge {
  """The item at the end of the edge"""
  node: Like

  """A cursor for use in pagination"""
  cursor: String!
}

type Like implements Node {
  id: ID!
  liker: CeramicAccount!
  status: Boolean!
}

"""A connection to a list of items."""
type FollowConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FollowEdge]
}

"""An edge in a connection."""
type FollowEdge {
  """The item at the end of the edge"""
  node: Follow

  """A cursor for use in pagination"""
  cursor: String!
}

type Follow implements Node {
  id: ID!
  status: Boolean!
  following: CeramicAccount!

  """Account controlling the document"""
  follower: CeramicAccount!
}

"""A connection to a list of items."""
type LikeAudioConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LikeAudioEdge]
}

"""An edge in a connection."""
type LikeAudioEdge {
  """The item at the end of the edge"""
  node: LikeAudio

  """A cursor for use in pagination"""
  cursor: String!
}

type LikeAudio implements Node {
  id: ID!
  likeID: CeramicStreamID!
  audioID: CeramicStreamID!
  like: Like
  audio: Audio
}

"""A Ceramic Stream ID"""
scalar CeramicStreamID @specifiedBy(url: "https://github.com/ceramicnetwork/CIP/blob/main/CIPs/CIP-59/CIP-59.md#streamid")

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  createAudio(input: CreateAudioInput!): CreateAudioPayload
  updateAudio(input: UpdateAudioInput!): UpdateAudioPayload
  createFollow(input: CreateFollowInput!): CreateFollowPayload
  updateFollow(input: UpdateFollowInput!): UpdateFollowPayload
  createLike(input: CreateLikeInput!): CreateLikePayload
  updateLike(input: UpdateLikeInput!): UpdateLikePayload
  createLikeAudio(input: CreateLikeAudioInput!): CreateLikeAudioPayload
  updateLikeAudio(input: UpdateLikeAudioInput!): UpdateLikeAudioPayload
}

type CreateUserPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: User!
  clientMutationId: String
}

input CreateUserInput {
  content: UserInput!
  clientMutationId: String
}

input UserInput {
  name: String!
  creator: Boolean!
  followers: Int
}

type UpdateUserPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: User!
  clientMutationId: String
}

input UpdateUserInput {
  id: ID!
  content: PartialUserInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialUserInput {
  name: String
  creator: Boolean
  followers: Int
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://github.com/ceramicnetwork/CIP/blob/main/CIPs/CIP-59/CIP-59.md#commitid")

type CreateAudioPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Audio!
  clientMutationId: String
}

input CreateAudioInput {
  content: AudioInput!
  clientMutationId: String
}

input AudioInput {
  title: String!
  public: Boolean!
  deleted: Boolean!
  audioImage: String!
  audioTrack: String!
}

type UpdateAudioPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Audio!
  clientMutationId: String
}

input UpdateAudioInput {
  id: ID!
  content: PartialAudioInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialAudioInput {
  title: String
  public: Boolean
  deleted: Boolean
  audioImage: String
  audioTrack: String
}

type CreateFollowPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Follow!
  clientMutationId: String
}

input CreateFollowInput {
  content: FollowInput!
  clientMutationId: String
}

input FollowInput {
  status: Boolean!
  following: DID!
}

"""
A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.
"""
scalar DID @specifiedBy(url: "https://www.w3.org/TR/did-core/")

type UpdateFollowPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Follow!
  clientMutationId: String
}

input UpdateFollowInput {
  id: ID!
  content: PartialFollowInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialFollowInput {
  status: Boolean
  following: DID
}

type CreateLikePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Like!
  clientMutationId: String
}

input CreateLikeInput {
  content: LikeInput!
  clientMutationId: String
}

input LikeInput {
  liker: DID!
  status: Boolean!
}

type UpdateLikePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Like!
  clientMutationId: String
}

input UpdateLikeInput {
  id: ID!
  content: PartialLikeInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialLikeInput {
  liker: DID
  status: Boolean
}

type CreateLikeAudioPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: LikeAudio!
  clientMutationId: String
}

input CreateLikeAudioInput {
  content: LikeAudioInput!
  clientMutationId: String
}

input LikeAudioInput {
  likeID: CeramicStreamID!
  audioID: CeramicStreamID!
}

type UpdateLikeAudioPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: LikeAudio!
  clientMutationId: String
}

input UpdateLikeAudioInput {
  id: ID!
  content: PartialLikeAudioInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialLikeAudioInput {
  likeID: CeramicStreamID
  audioID: CeramicStreamID
}