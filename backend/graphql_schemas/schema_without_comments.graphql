type Query {
  node(
    id: ID!
  ): Node

  viewer: CeramicAccount
  followIndex(
    after: String
    first: Int
    before: String
    last: Int
  ): FollowConnection
  audioIndex(
    after: String
    first: Int
    before: String
    last: Int
  ): audioConnection
  userIndex(
    after: String
    first: Int
    before: String
    last: Int
  ): UserConnection
}

interface Node {
  id: ID!
}

type CeramicAccount implements Node {
  id: ID!
  isViewer: Boolean!
  followList(
    after: String
    first: Int
    before: String
    last: Int
  ): FollowConnection
  audioList(
    after: String
    first: Int
    before: String
    last: Int
  ): audioConnection
  user: User
}

type FollowConnection {
  pageInfo: PageInfo!
  edges: [FollowEdge]
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type FollowEdge {
  node: Follow
  cursor: String!
}

type Follow implements Node {
  id: ID!
  following: CeramicAccount!
  follower: CeramicAccount!
}

type audioConnection {
  pageInfo: PageInfo!
  edges: [audioEdge]
}

type audioEdge {
  node: audio
  cursor: String!
}

type audio implements Node {
  id: ID!
  likes: Int
  title: String!
  public: Boolean!
  audioImage: String!
  audioTrack: String!
  creator: CeramicAccount!
}

type User implements Node {
  id: ID!
  name: String!
  creator: Boolean!
  followers: Int
  did: CeramicAccount!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: String!
}

type Mutation {
  createFollow(input: CreateFollowInput!): CreateFollowPayload
  updateFollow(input: UpdateFollowInput!): UpdateFollowPayload
  createaudio(input: CreateaudioInput!): CreateaudioPayload
  updateaudio(input: UpdateaudioInput!): UpdateaudioPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
}

type CreateFollowPayload {
  node(
    id: ID!
  ): Node

  viewer: CeramicAccount
  document: Follow!
  clientMutationId: String
}

input CreateFollowInput {
  content: FollowInput!
  clientMutationId: String
}

input FollowInput {
  following: DID!
}

scalar DID @specifiedBy(url: "https://www.w3.org/TR/did-core/")

type UpdateFollowPayload {
  node(
    id: ID!
  ): Node

  viewer: CeramicAccount
  document: Follow!
  clientMutationId: String
}

input UpdateFollowInput {
  id: ID!
  content: PartialFollowInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialFollowInput {
  following: DID
}

input UpdateOptionsInput {
  replace: Boolean = false
  version: CeramicCommitID
}

scalar CeramicCommitID @specifiedBy(url: "https://github.com/ceramicnetwork/CIP/blob/main/CIPs/CIP-59/CIP-59.md#commitid")

type CreateaudioPayload {
  node(
    id: ID!
  ): Node

  viewer: CeramicAccount
  document: audio!
  clientMutationId: String
}

input CreateaudioInput {
  content: audioInput!
  clientMutationId: String
}

input audioInput {
  likes: Int
  title: String!
  public: Boolean!
  audioImage: String!
  audioTrack: String!
}

type UpdateaudioPayload {
  node(
    id: ID!
  ): Node

  viewer: CeramicAccount
  document: audio!
  clientMutationId: String
}

input UpdateaudioInput {
  id: ID!
  content: PartialaudioInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialaudioInput {
  likes: Int
  title: String
  public: Boolean
  audioImage: String
  audioTrack: String
}

type CreateUserPayload {
  node(
    id: ID!
  ): Node

  viewer: CeramicAccount
  document: User!
  clientMutationId: String
}

input CreateUserInput {
  content: UserInput!
  clientMutationId: String
}

input UserInput {
  name: String!
  creator: Boolean!
  followers: Int
}

type UpdateUserPayload {
  node(
    id: ID!
  ): Node

  viewer: CeramicAccount
  document: User!
  clientMutationId: String
}

input UpdateUserInput {
  id: ID!
  content: PartialUserInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialUserInput {
  name: String
  creator: Boolean
  followers: Int
}