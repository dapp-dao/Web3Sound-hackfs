type Query {
  node(id: ID!): Node
  viewer: CeramicAccount
  userIndex(after: String, first: Int, before: String, last: Int): UserConnection
  audioIndex(after: String, first: Int, before: String, last: Int): AudioConnection
  followIndex(after: String, first: Int, before: String, last: Int): FollowConnection
  likeIndex(after: String, first: Int, before: String, last: Int): LikeConnection
  likeAudioIndex(after: String, first: Int, before: String, last: Int): LikeAudioConnection
}

interface Node {
  id: ID!
}

type CeramicAccount implements Node {
  id: ID!
  isViewer: Boolean!
  user: User
  audioList(after: String, first: Int, before: String, last: Int): AudioConnection
  followList(after: String, first: Int, before: String, last: Int): FollowConnection
  likeList(after: String, first: Int, before: String, last: Int): LikeConnection
  likeAudioList(after: String, first: Int, before: String, last: Int): LikeAudioConnection
}

type User implements Node {
  id: ID!
  name: String!
  creator: Boolean!
  followers: Int
  did: CeramicAccount!
}

type AudioConnection {
  pageInfo: PageInfo!
  edges: [AudioEdge]
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type AudioEdge {
  node: Audio
  cursor: String!
}

type Audio implements Node {
  id: ID!
  likes(after: String, first: Int, before: String, last: Int, account: ID): LikeConnection!
  title: String!
  public: Boolean!
  deleted: Boolean!
  audioImage: String!
  audioTrack: String!
  creator: CeramicAccount!
}

type LikeConnection {
  pageInfo: PageInfo!
  edges: [LikeEdge]
}

type LikeEdge {
  node: Like
  cursor: String!
}

type Like implements Node {
  id: ID!
  liker: CeramicAccount!
  status: Boolean!
}

type FollowConnection {
  pageInfo: PageInfo!
  edges: [FollowEdge]
}

type FollowEdge {
  node: Follow
  cursor: String!
}

type Follow implements Node {
  id: ID!
  status: Boolean!
  following: CeramicAccount!
  follower: CeramicAccount!
}

type LikeAudioConnection {
  pageInfo: PageInfo!
  edges: [LikeAudioEdge]
}

type LikeAudioEdge {
  node: LikeAudio
  cursor: String!
}

type LikeAudio implements Node {
  id: ID!
  likeID: CeramicStreamID!
  audioID: CeramicStreamID!
  like: Like
  audio: Audio
}

scalar CeramicStreamID

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: String!
}

type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  createAudio(input: CreateAudioInput!): CreateAudioPayload
  updateAudio(input: UpdateAudioInput!): UpdateAudioPayload
  createFollow(input: CreateFollowInput!): CreateFollowPayload
  updateFollow(input: UpdateFollowInput!): UpdateFollowPayload
  createLike(input: CreateLikeInput!): CreateLikePayload
  updateLike(input: UpdateLikeInput!): UpdateLikePayload
  createLikeAudio(input: CreateLikeAudioInput!): CreateLikeAudioPayload
  updateLikeAudio(input: UpdateLikeAudioInput!): UpdateLikeAudioPayload
}

type CreateUserPayload {
  node(id: ID!): Node
  viewer: CeramicAccount
  document: User!
  clientMutationId: String
}

input CreateUserInput {
  content: UserInput!
  clientMutationId: String
}

input UserInput {
  name: String!
  creator: Boolean!
  followers: Int
}

type UpdateUserPayload {
  node(id: ID!): Node
  viewer: CeramicAccount
  document: User!
  clientMutationId: String
}

input UpdateUserInput {
  id: ID!
  content: PartialUserInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialUserInput {
  name: String
  creator: Boolean
  followers: Int
}

input UpdateOptionsInput {
  replace: Boolean = false
  version: CeramicCommitID
}

scalar CeramicCommitID

type CreateAudioPayload {
  node(id: ID!): Node
  viewer: CeramicAccount
  document: Audio!
  clientMutationId: String
}

input CreateAudioInput {
  content: AudioInput!
  clientMutationId: String
}

input AudioInput {
  title: String!
  public: Boolean!
  deleted: Boolean!
  audioImage: String!
  audioTrack: String!
}

type UpdateAudioPayload {
  node(id: ID!): Node
  viewer: CeramicAccount
  document: Audio!
  clientMutationId: String
}

input UpdateAudioInput {
  id: ID!
  content: PartialAudioInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialAudioInput {
  title: String
  public: Boolean
  deleted: Boolean
  audioImage: String
  audioTrack: String
}

type CreateFollowPayload {
  node(id: ID!): Node
  viewer: CeramicAccount
  document: Follow!
  clientMutationId: String
}

input CreateFollowInput {
  content: FollowInput!
  clientMutationId: String
}

input FollowInput {
  status: Boolean!
  following: DID!
}

scalar DID

type UpdateFollowPayload {
  node(id: ID!): Node
  viewer: CeramicAccount
  document: Follow!
  clientMutationId: String
}

input UpdateFollowInput {
  id: ID!
  content: PartialFollowInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialFollowInput {
  status: Boolean
  following: DID
}

type CreateLikePayload {
  node(id: ID!): Node
  viewer: CeramicAccount
  document: Like!
  clientMutationId: String
}

input CreateLikeInput {
  content: LikeInput!
  clientMutationId: String
}

input LikeInput {
  liker: DID!
  status: Boolean!
}

type UpdateLikePayload {
  node(id: ID!): Node
  viewer: CeramicAccount
  document: Like!
  clientMutationId: String
}

input UpdateLikeInput {
  id: ID!
  content: PartialLikeInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialLikeInput {
  liker: DID
  status: Boolean
}

type CreateLikeAudioPayload {
  node(id: ID!): Node
  viewer: CeramicAccount
  document: LikeAudio!
  clientMutationId: String
}

input CreateLikeAudioInput {
  content: LikeAudioInput!
  clientMutationId: String
}

input LikeAudioInput {
  likeID: CeramicStreamID!
  audioID: CeramicStreamID!
}

type UpdateLikeAudioPayload {
  node(id: ID!): Node
  viewer: CeramicAccount
  document: LikeAudio!
  clientMutationId: String
}

input UpdateLikeAudioInput {
  id: ID!
  content: PartialLikeAudioInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialLikeAudioInput {
  likeID: CeramicStreamID
  audioID: CeramicStreamID
}
